<!DOCTYPE html>
<html lang="fr" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ma RoadMap - Dashboard Pro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'green-primary': '#10b981',
                        'green-secondary': '#059669',
                        'green-light': '#d1fae5',
                    }
                }
            }
        }
    </script>
    <style>
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes pulse-green {
            0%, 100% {
                box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
            }
        }
        
        @keyframes shimmer {
            0% {
                background-position: -200px 0;
            }
            100% {
                background-position: calc(200px + 100%) 0;
            }
        }
        
        .animate-fade-in-up {
            animation: fadeInUp 0.6s ease-out;
        }
        
        .animate-pulse-green {
            animation: pulse-green 2s infinite;
        }
        
        .shimmer {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200px 100%;
            animation: shimmer 1.5s infinite;
        }
        
        .skill-tag {
            transition: all 0.3s ease;
        }
        
        .skill-tag:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }
        
        .project-card {
            transition: all 0.3s ease;
        }
        
        .project-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .btn-primary:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }
        
        .btn-primary:hover:before {
            left: 100%;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-full" x-data="dashboard()">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center justify-between">
                <div class="animate-fade-in-up">
                    <h1 class="text-2xl font-bold text-gray-900" x-text="`Bonjour, ${userName} `"></h1>
                    <p class="text-green-primary font-medium">Vous êtes connectés </p>
                </div>
                <div class="animate-pulse-green">
                    <div class="w-12 h-12 bg-green-primary rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Section Mes compétences -->
        <section class="mb-12 animate-fade-in-up">
            <div class="rounded-xl shadow-sm p-6 border border-gray-200">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-semibold text-gray-900">Mes compétences</h2>
                    <button 
                        @click="editSkills = !editSkills"
                        class="btn-primary bg-green-primary hover:bg-green-secondary text-white px-4 py-2 rounded-lg font-medium"
                    >
                        <span x-show="!editSkills">Modifier mes compétences</span>
                        <span x-show="editSkills">Terminer</span>
                    </button>
                </div>
                
                <div class="flex flex-wrap gap-3">
                    <template x-for="skill in skills" :key="skill">
                        <span class="skill-tag inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-green-light text-green-secondary border border-green-primary/20">
                            <span x-text="skill"></span>
                            <button 
                                x-show="editSkills" 
                                @click="removeSkill(skill)"
                                class="ml-2 text-green-secondary hover:text-red-500 transition-colors"
                            >
                                
                            </button>
                        </span>
                    </template>
                    
                    <div x-show="editSkills" class="inline-flex items-center">
                        <input 
                            x-model="newSkill"
                            @keyup.enter="addSkill()"
                            type="text" 
                            placeholder="Nouvelle compétence..."
                            class="px-3 py-2 border border-green-primary/30 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-green-primary focus:border-transparent"
                        >
                        <button 
                            @click="addSkill()"
                            class="ml-2 w-8 h-8 bg-green-primary text-white rounded-full flex items-center justify-center hover:bg-green-secondary transition-colors"
                        >
                            +
                        </button>
                    </div>
                </div>
            </div>
        </section>

        <!-- Section Projets correspondants -->
        <section class="animate-fade-in-up">
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-semibold text-gray-900">Projets correspondants</h2>
                    <button 
                        @click="loadProjects()"
                        class="btn-primary bg-green-primary hover:bg-green-secondary text-white px-4 py-2 rounded-lg font-medium"
                        :disabled="loading"
                    >
                        <span x-show="!loading">Actualiser</span>
                        <span x-show="loading" class="flex items-center">
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Chargement...
                        </span>
                    </button>
                </div>

                <!-- Loading State -->
                <div x-show="loading" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <template x-for="i in 6" :key="i">
                        <div class="border border-gray-200 rounded-lg p-6">
                            <div class="shimmer h-4 rounded mb-4"></div>
                            <div class="shimmer h-3 rounded mb-2"></div>
                            <div class="shimmer h-3 rounded mb-4 w-3/4"></div>
                            <div class="shimmer h-8 rounded"></div>
                        </div>
                    </template>
                </div>

                <!-- Projects Grid -->
                <div x-show="!loading" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <template x-for="project in projects" :key="project.id">
                        <div class="project-card border border-gray-200 rounded-lg p-6 hover:border-green-primary/30">
                            <h3 class="font-semibold text-gray-900 mb-2" x-text="project.title"></h3>
                            <p class="text-gray-600 text-sm mb-4" x-text="project.client"></p>
                            
                            <div class="flex flex-wrap gap-2 mb-4">
                                <template x-for="tag in project.tags" :key="tag">
                                    <span class="inline-block px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full" x-text="tag"></span>
                                </template>
                            </div>
                            
                            <button 
                                @click="proposeServices(project.id)"
                                class="btn-primary w-full bg-green-primary hover:bg-green-secondary text-white py-2 px-4 rounded-lg font-medium"
                                :disabled="project.proposed"
                            >
                                <span x-show="!project.proposed">Proposer mes services</span>
                                <span x-show="project.proposed" class="flex items-center justify-center">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    Proposition envoyée
                                </span>
                            </button>
                        </div>
                    </template>
                </div>

                <div x-show="!loading && projects.length === 0" class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun projet trouvé</h3>
                    <p class="mt-1 text-sm text-gray-500">Aucun projet ne correspond à vos compétences pour le moment.</p>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="bg-white border-t border-gray-200 mt-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex items-center justify-between">
                <button 
                    @click="logout()"
                    class="flex items-center text-gray-600 hover:text-red-500 transition-colors font-medium"
                >
                   <a href="https://preprod.maroadmap.com/professionnel.html">
                   <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                    </svg>
                    Se déconnecter
                </button></a>
                
                <div class="flex items-center text-green-primary font-bold">
                    <svg class="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                    </svg>
                    Ma RoadMap
                </div>
            </div>
        </div>
    </footer>

   <script>
function dashboard() {
    return {
        userName: 'Professionnel',
        loading: false,
        editSkills: false,
        newSkill: '',
        skills: [],
        projects: [],
        hasuraAdminSecret: 'ton_admin_secret', // à personnaliser

        init() {
            const userData = JSON.parse(localStorage.getItem('userData') || '{}');
            this.userName = userData.name || 'Professionnel';
            this.loadProjects();
        },


        async init() {
    const userData = JSON.parse(localStorage.getItem('userData') || '{}');
    this.userName = userData.name || 'Professionnel';
    const proId = userData.id;

    // Nouvelle requête pour charger les skills depuis Hasura
    const res = await fetch('https://hasura-preprod.maroadmap.com/v1/graphql', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'x-hasura-admin-secret': this.hasuraAdminSecret
        },
        body: JSON.stringify({
            query: `
                query($proId: Int!) {
                    professionals_keywords(where: { professional_id: { _eq: $proId } }) {
                        keyword {
                            name
                        }
                    }
                }
            `,
            variables: { proId }
        })
    });

    const data = await res.json();
    this.skills = data.data.professionals_keywords.map(k => k.keyword.name);

    this.loadProjects();
}
,


















        async addSkill() {
  const skill = this.newSkill.trim();
  if (!skill || this.skills.includes(skill)) return;

  this.skills.push(skill);
  this.newSkill = '';
  this.saveSkills();

  const userData = JSON.parse(localStorage.getItem('userData') || '{}');
  const professional_id = userData.id;

  await lierSkillAuMotCle(skill, professional_id, this.hasuraAdminSecret);
},


        removeSkill(skill) {
            this.skills = this.skills.filter(s => s !== skill);
            this.saveSkills();
        },


        async removeSkill(skill) {
    this.skills = this.skills.filter(s => s !== skill);
    this.saveSkills();

    const userData = JSON.parse(localStorage.getItem('userData') || '{}');
    const proId = userData.id;

    await fetch("https://hasura-preprod.maroadmap.com/v1/graphql", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "x-hasura-admin-secret": this.hasuraAdminSecret
        },
        body: JSON.stringify({
            query: `
              mutation DeleteSkill($proId: Int!, $skill: String!) {
                delete_professionals_keywords(
                  where: {
                    professional_id: { _eq: $proId },
                    keyword: { name: { _eq: $skill } }
                  }
                ) {
                  affected_rows
                }
              }
            `,
            variables: {
                proId,
                skill
            }
        })
    });
}
,






        saveSkills() {
            localStorage.setItem('userSkills', JSON.stringify(this.skills));
        },

        async loadProjects() {
            this.loading = true;
            this.projects = [];

            const userData = JSON.parse(localStorage.getItem('userData'));
            const proId = userData.id;

            // Étape 1 : récupérer les keywords du pro
            const keywordsResponse = await fetch('https://hasura-preprod.maroadmap.com/v1/graphql', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-hasura-admin-secret': this.hasuraAdminSecret,
                },
                body: JSON.stringify({
                    query: `
                        query($proId: Int!) {
                            professionals_keywords(where: { professional_id: { _eq: $proId } }) {
                                keyword_id
                            }
                        }
                    `,
                    variables: { proId }
                })
            });

            const keywordsData = await keywordsResponse.json();
            console.log("🔍 Résultat keywords Hasura :", keywordsData);
         const professionalsKeywords = keywordsData.data?.professionals_keywords || [];

if (professionalsKeywords.length === 0) {
    console.warn("⚠️ Aucun mot-clé trouvé pour ce professionnel.");
    this.loading = false;
    return;
}

const keywordIds = professionalsKeywords.map(k => k.keyword_id);


            // Étape 2 : récupérer les projets liés à ces keywords
            const projectsResponse = await fetch('https://hasura-preprod.maroadmap.com/v1/graphql', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-hasura-admin-secret': this.hasuraAdminSecret,
                },
                body: JSON.stringify({
                    query: `
                      query($keywordIds: [Int!]) {
  step_keywords(where: { keyword_id: { _in: $keywordIds } }) {
    step {
      project {
        id
        name
        user_id
      }
      step_keywords {
        keyword {
          name
        }
      }
    }
  }
}


                    `,
                    variables: { keywordIds }
                })
            });

          const result = await projectsResponse.json();
console.log("📦 Résultat de la requête projets :", result.data);


const projetsMap = {};
result.data.step_keywords.forEach(({ step }) => {
    
  const projet = step.project;


    if (!projet) return;

    if (!projetsMap[projet.id]) {
        projetsMap[projet.id] = {
            id: projet.id,
            title: projet.name,
            client: 'Utilisateur inconnu', // tu peux améliorer ça après
            tags: [],
            proposed: false
        };
    }
step.step_keywords.forEach(sk => {
        projetsMap[projet.id].tags.push(sk.keyword.name);
    });

    // Supprime les doublons de tags
    projetsMap[projet.id].tags = [...new Set(projetsMap[projet.id].tags)];
});

this.projects = Object.values(projetsMap);
this.loading = false;

        },

        async proposeServices(projectId) {
            try {
                const userData = JSON.parse(localStorage.getItem('userData'));
                const professionalId = userData.id;
                if (!proId) {
    console.error("❌ Aucun ID professionnel trouvé dans localStorage.");
    this.loading = false;
    return;
}

                const mutation = `
                    mutation($input: proposals_insert_input!) {
                        insert_proposals_one(object: $input) {
                            id
                        }
                    }
                `;

                const response = await fetch('https://hasura-preprod.maroadmap.com/v1/graphql', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-hasura-admin-secret': this.hasuraAdminSecret
                    },
                    body: JSON.stringify({
                        query: mutation,
                        variables: {
                            input: {
                                professional_id: professionalId,
                                project_type_id: projectId,
                                message: "Bonjour, je peux vous accompagner sur ce projet."
                            }
                        }
                    })
                });

                const data = await response.json();

                if (data.data && data.data.insert_proposals_one) {
                    const project = this.projects.find(p => p.id === projectId);
                    if (project) {
                        project.proposed = true;
                        alert("Votre proposition a été envoyée avec succès !");
                    }
                } else {
                    alert("Une erreur est survenue. Veuillez réessayer.");
                }
            } catch (err) {
                console.error(err);
                alert("Erreur réseau ou serveur.");
            }
        }
    }
}
</script>
<script>
async function lierSkillAuMotCle(skill, professional_id, hasuraSecret) {
  const res = await fetch("https://hasura-preprod.maroadmap.com/v1/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-hasura-admin-secret": hasuraSecret
    },
    body: JSON.stringify({
      query: `
        mutation InsertKeyword($name: String!) {
          insert_keywords_one(
            object: { name: $name },
            on_conflict: { constraint: keywords_name_key, update_columns: [name] }
          ) {
            id
          }
        }
      `,
      variables: { name: skill }
    })
  });

  const data = await res.json();
  const keyword_id = data?.data?.insert_keywords_one?.id;
  if (!keyword_id) return;

  await fetch("https://hasura-preprod.maroadmap.com/v1/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-hasura-admin-secret": hasuraSecret
    },
    body: JSON.stringify({
      query: `
        mutation LinkProKeyword($professional_id: Int!, $keyword_id: Int!) {
          insert_professionals_keywords_one(object: {
            professional_id: $professional_id,
            keyword_id: $keyword_id
          }, on_conflict: {
            constraint: professionals_keywords_professional_id_keyword_id_key,
            update_columns: []
          }) {
            id
          }
        }
      `,
      variables: { professional_id, keyword_id }
    })
  });
}



</script>
</body>
</html>
